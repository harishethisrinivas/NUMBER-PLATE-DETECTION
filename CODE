import cv2
import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk
import random

class NumberPlateDetectorApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Number Plate Detection")
        self.master.geometry("800x600")

        # Set random background color
        self.background_color = self.random_color()
        self.master.configure(bg=self.background_color)

        self.create_widgets()

    def create_widgets(self):
        # Center window (cross-platform method)
        self.master.update_idletasks()
        width = self.master.winfo_width()
        height = self.master.winfo_height()
        x = (self.master.winfo_screenwidth() // 2) - (width // 2)
        y = (self.master.winfo_screenheight() // 2) - (height // 2)
        self.master.geometry(f"+{x}+{y}")

        # Title Label
        title_label = tk.Label(self.master, text="Smart Number Plate Detector",
                               font=("Helvetica", 20, "bold"), bg=self.background_color, fg="black")
        title_label.pack(pady=20)

        # Select Image Button
        self.open_button = tk.Button(self.master, text="Select Image",
                                     font=("Arial", 16, "bold"), bg="#4CAF50", fg="white",
                                     command=self.animate_button)
        self.open_button.pack(pady=20, ipadx=20, ipady=10)

        # Result label
        self.result_label = tk.Label(self.master, text="", font=("Arial", 14),
                                     bg=self.background_color, fg="black")
        self.result_label.pack(pady=10)

        # Image display label
        self.image_label = tk.Label(self.master, bg=self.background_color)
        self.image_label.pack(pady=10)

    def animate_button(self):
        # Show loading animation
        self.open_button.config(text="Loading...", state="disabled")
        self.master.after(800, self.process_image)

    def process_image(self):
        file_path = filedialog.askopenfilename(
            filetypes=[("Image Files", "*.jpg *.jpeg *.png *.bmp")])
        if file_path:
            self.detect_number_plate(file_path)
        self.open_button.config(text="Select Image", state="normal")

    def detect_number_plate(self, image_path):
        try:
            image = cv2.imread(image_path)
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

            # Load Haar cascade
            plate_cascade = cv2.CascadeClassifier(
                cv2.data.haarcascades + 'haarcascade_russian_plate_number.xml')

            plates = plate_cascade.detectMultiScale(
                gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

            if len(plates) == 0:
                self.result_label.config(text="No number plate detected")
                self.display_image(image_path)
            else:
                for (x, y, w, h) in plates:
                    cv2.rectangle(image, (x, y), (x+w, y+h), (0, 255, 0), 2)

                image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
                image = Image.fromarray(image)
                image.thumbnail((600, 400))
                img_tk = ImageTk.PhotoImage(image)

                self.image_label.config(image=img_tk)
                self.image_label.image = img_tk
                self.result_label.config(text="Number plate detected!")

        except Exception as e:
            self.result_label.config(text=f"Error: {e}")

    def display_image(self, image_path):
        image = Image.open(image_path)
        image.thumbnail((600, 400))
        img_tk = ImageTk.PhotoImage(image)

        self.image_label.config(image=img_tk)
        self.image_label.image = img_tk

    def random_color(self):
        colors = ["#FFCCCC", "#CCE5FF", "#CCFFCC", "#FFFACD", "#E6CCFF"]
        return random.choice(colors)

# Launch the GUI
if __name__ == "__main__":
    root = tk.Tk()
    app = NumberPlateDetectorApp(root)
    root.mainloop()
